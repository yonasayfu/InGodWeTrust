<?php

namespace App\Models {

  /**
   * App\Models\BankForm
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property string $form_file
   * @property string $form_name
   * @property string $bank_name
   * @property int $id
   * @property-read mixed $form_file_url
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm whereBankName($value)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm whereFormName($value)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm whereFormFile($value)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm query()
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm select(array|mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm fromRaw(string $expression, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm addSelect(array|mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm whereRaw(string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm dynamicWhere(string $method, array $parameters)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static BankForm|null find(int|string $id, array|string $columns)
   * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static int getCountForPagination(array $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static bool insert()
   * @method static int insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert(array|string $uniqueBy, array|null $update)
   * @method static int increment(string $column, float|int $amount)
   * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int decrement(string $column, float|int $amount)
   * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static array getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static array getBindings()
   * @method static array getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm setBindings(string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm addBinding(mixed $value, string $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm mergeBindings()
   * @method static array cleanBindings()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm useWritePdo()
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm clone()
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm orWhereTodayOrBefore(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm orWhereAfterToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm orWhereTodayOrAfter(array|string $columns, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static BankForm|null first(array|string $columns)
   * @method static BankForm firstOrFail(array|string $columns, string|null $message)
   * @method static BankForm sole(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<BankForm>|BankForm tap(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class BankForm extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\DonationAgreement
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property \Illuminate\Support\Carbon|null $deleted_at
   * @property string $summary_pdf
   * @property string $signed_agreement_pdf
   * @property string|null $recurring_interval
   * @property float $donation_amount
   * @property string $donation_type
   * @property int $bank_id
   * @property int $supporter_id
   * @property int $id
   * @property-read \App\Models\Supporter $supporter
   * @property-read \App\Models\BankForm $bankForm
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement whereSupporterId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement whereBankId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement whereDonationType($value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement whereDonationAmount($value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement whereRecurringInterval($value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement whereSignedAgreementPdf($value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement whereSummaryPdf($value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement whereDeletedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement search()
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement query()
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement select(array|mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement fromRaw(string $expression, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement addSelect(array|mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement whereRaw(string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement dynamicWhere(string $method, array $parameters)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static DonationAgreement|null find(int|string $id, array|string $columns)
   * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static int getCountForPagination(array $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static bool insert()
   * @method static int insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert(array|string $uniqueBy, array|null $update)
   * @method static int increment(string $column, float|int $amount)
   * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int decrement(string $column, float|int $amount)
   * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static array getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static array getBindings()
   * @method static array getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement setBindings(string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement addBinding(mixed $value, string $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement mergeBindings()
   * @method static array cleanBindings()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement useWritePdo()
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement clone()
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement orWhereTodayOrBefore(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement orWhereAfterToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement orWhereTodayOrAfter(array|string $columns, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static DonationAgreement|null first(array|string $columns)
   * @method static DonationAgreement firstOrFail(array|string $columns, string|null $message)
   * @method static DonationAgreement sole(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationAgreement>|DonationAgreement tap(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class DonationAgreement extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\DonationTransaction
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property string|null $status
   * @property string|null $transaction_date
   * @property string|null $payment_method
   * @property float|null $amount
   * @property int|null $donation_processing_id
   * @property int $supporter_id
   * @property int $id
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction whereSupporterId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction whereDonationProcessingId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction whereAmount($value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction wherePaymentMethod($value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction whereTransactionDate($value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction whereStatus($value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction query()
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction select(array|mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction fromRaw(string $expression, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction addSelect(array|mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction whereRaw(string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction dynamicWhere(string $method, array $parameters)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static DonationTransaction|null find(int|string $id, array|string $columns)
   * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static int getCountForPagination(array $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static bool insert()
   * @method static int insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert(array|string $uniqueBy, array|null $update)
   * @method static int increment(string $column, float|int $amount)
   * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int decrement(string $column, float|int $amount)
   * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static array getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static array getBindings()
   * @method static array getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction setBindings(string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction addBinding(mixed $value, string $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction mergeBindings()
   * @method static array cleanBindings()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction useWritePdo()
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction clone()
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction orWhereTodayOrBefore(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction orWhereAfterToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction orWhereTodayOrAfter(array|string $columns, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static DonationTransaction|null first(array|string $columns)
   * @method static DonationTransaction firstOrFail(array|string $columns, string|null $message)
   * @method static DonationTransaction sole(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<DonationTransaction>|DonationTransaction tap(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class DonationTransaction extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\Supporter
   *
   * @property string|null $deleted_at
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property string|null $photo_url
   * @property string|null $testimonial_content
   * @property string $bank_details
   * @property \Illuminate\Support\Carbon $start_date
   * @property integer $commit_duration
   * @property decimal:2 $contribution_amount
   * @property string $support_type
   * @property string $email
   * @property string $phone_number
   * @property string $address
   * @property string $gender
   * @property integer $age
   * @property string $name
   * @property int $id
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter whereName($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter whereAge($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter whereGender($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter whereAddress($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter wherePhoneNumber($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter whereEmail($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter whereSupportType($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter whereContributionAmount($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter whereCommitDuration($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter whereStartDate($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter whereBankDetails($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter whereTestimonialContent($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter wherePhotoUrl($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter whereDeletedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter query()
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter select(array|mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter fromRaw(string $expression, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter addSelect(array|mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter whereRaw(string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter dynamicWhere(string $method, array $parameters)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static Supporter|null find(int|string $id, array|string $columns)
   * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static int getCountForPagination(array $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static bool insert()
   * @method static int insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert(array|string $uniqueBy, array|null $update)
   * @method static int increment(string $column, float|int $amount)
   * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int decrement(string $column, float|int $amount)
   * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static array getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static array getBindings()
   * @method static array getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter setBindings(string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter addBinding(mixed $value, string $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter mergeBindings()
   * @method static array cleanBindings()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter useWritePdo()
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter clone()
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter orWhereTodayOrBefore(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter orWhereAfterToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter orWhereTodayOrAfter(array|string $columns, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static Supporter|null first(array|string $columns)
   * @method static Supporter firstOrFail(array|string $columns, string|null $message)
   * @method static Supporter sole(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Supporter>|Supporter tap(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class Supporter extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\TargetDonation
   *
   * @property string|null $deleted_at
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property \Illuminate\Support\Carbon $end_date
   * @property \Illuminate\Support\Carbon $start_date
   * @property decimal:2 $target_amount
   * @property string $period
   * @property int $id
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation wherePeriod($value)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation whereTargetAmount($value)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation whereStartDate($value)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation whereEndDate($value)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation whereDeletedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation query()
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation select(array|mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation fromRaw(string $expression, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation addSelect(array|mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation whereRaw(string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation dynamicWhere(string $method, array $parameters)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static TargetDonation|null find(int|string $id, array|string $columns)
   * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static int getCountForPagination(array $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static bool insert()
   * @method static int insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert(array|string $uniqueBy, array|null $update)
   * @method static int increment(string $column, float|int $amount)
   * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int decrement(string $column, float|int $amount)
   * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static array getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static array getBindings()
   * @method static array getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation setBindings(string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation addBinding(mixed $value, string $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation mergeBindings()
   * @method static array cleanBindings()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation useWritePdo()
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation clone()
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation orWhereTodayOrBefore(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation orWhereAfterToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation orWhereTodayOrAfter(array|string $columns, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static TargetDonation|null first(array|string $columns)
   * @method static TargetDonation firstOrFail(array|string $columns, string|null $message)
   * @method static TargetDonation sole(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<TargetDonation>|TargetDonation tap(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class TargetDonation extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\User
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property string|null $remember_token
   * @property string $password
   * @property \Illuminate\Support\Carbon|null $email_verified_at
   * @property string $email
   * @property string $name
   * @property int $id
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \Illuminate\Notifications\DatabaseNotification> $notifications
   * @property-read int|null $notifications_count
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereName($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereEmail($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereEmailVerifiedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User wherePassword($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereRememberToken($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User query()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User select(array|mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User fromRaw(string $expression, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User addSelect(array|mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereRaw(string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User dynamicWhere(string $method, array $parameters)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static User|null find(int|string $id, array|string $columns)
   * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static int getCountForPagination(array $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static bool insert()
   * @method static int insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert(array|string $uniqueBy, array|null $update)
   * @method static int increment(string $column, float|int $amount)
   * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int decrement(string $column, float|int $amount)
   * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static array getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static array getBindings()
   * @method static array getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User setBindings(string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User addBinding(mixed $value, string $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User mergeBindings()
   * @method static array cleanBindings()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User useWritePdo()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User clone()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereTodayOrBefore(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereAfterToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereTodayOrAfter(array|string $columns, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static User|null first(array|string $columns)
   * @method static User firstOrFail(array|string $columns, string|null $message)
   * @method static User sole(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User tap(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class User extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

}